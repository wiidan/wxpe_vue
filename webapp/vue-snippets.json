{
    // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Print to console": {
        "prefix": "vue",
        "body": [
            "<template>",
            "    <div>\n",
            "    </div>",
            "</template>\n",
            "<script>",
            "export default {",
            "    name: '$1',",
            "    props: {\n",
            "    },",
            "    components: {\n",
            "    },",
            "    data() {",
            "        return {\n",
            "        };",
            "    },",
            "    computed: {\n",
            "    },",
            "    created() {\n",
            "    },",
            "    mounted() {\n",
            "    },",
            "    watch: {\n",
            "    },",
            "    methods: {\n",
            "    },",
            "};",
            "</script>\n",
            "<style scoped lang=\"${1:scss}\">",
            "    /* @import url(); 引入css类 */\n",
            "</style>\n",
        ],
        "description": "Create vue template"
    },
    "Vue Component": {
        "prefix": "vuets",
        "description": "Vue component snippet",
        "body": [
            "<template>",
            "    <div>\n",
            "    </div>",
            "</template>\n",
            "",
            "<script lang=\"ts\">",
            "import { Component, Prop, Vue } from 'vue-property-decorator';",
            "",
            "@Component",
            "export default class ${1:ComponentName} extends Vue {",
            "\t@Prop() private msg!: string;\n",
            "",
            "}",
            "</script>",
            "",
            "<style scoped lang=\"scss\">",
            "    /* @import url(); 引入css类 */\n",
            "</style>\n",
            ""
        ]
    },
    "Vue standard API (SFC)": {
        "prefix": "vbase",
        "body": [
            "<template>",
            "\t<div>",
            "",
            "\t</div>",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue from \"vue\";",
            "",
            "\texport default Vue.extend({",
            "\t\t${0}",
            "\t});",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base for Vue.js File with TypeScript"
    },
    "VueConstructor standard API (SFC)": {
        "prefix": "vcbase",
        "body": [
            "<template>",
            "\t<div>",
            "",
            "\t</div>",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue, { VueConstructor } from \"vue\";",
            "",
            "\texport default (Vue as VueConstructor<Vue>).extend({",
            "\t\t${0}",
            "\t});",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base with VueConstructor for Vue.js File with TypeScript"
    },
    "VueConstructor standard API extending interface (SFC)": {
        "prefix": "vcibase",
        "body": [
            "<template>",
            "\t<div>",
            "",
            "\t</div>",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue, { VueConstructor } from \"vue\";",
            "\timport ${1:NameComponent} from \"@/components/${1:NameComponent}.vue\";",
            "",
            "\tinterface Refs {",
            "\t\t\\$refs: {",
            "\t\t\t${2:aliasComponent}: InstanceType<typeof ${1:NameComponent}>,",
            "\t\t}",
            "\t}",
            "\texport default (Vue as VueConstructor<Vue & Refs>).extend({",
            "\t\t${0}",
            "\t});",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base with VueConstructor extending interface for Vue.js File with TypeScript"
    },
    "Class-style API Vue (SFC)": {
        "prefix": "vcsbase",
        "body": [
            "<template>",
            "\t<div>",
            "",
            "\t</div>",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue from \"vue\";",
            "\timport Component from \"vue-class-component\";",
            "",
            "\t@Component({})",
            "\texport default class ${1:App} extends Vue {",
            "\t\t${0}",
            "\t};",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base class-style API for Vue.js File with TypeScript"
    },
    "Class-style API Vue extending Props (SFC)": {
        "prefix": "vcsibase",
        "body": [
            "<template>",
            "\t<div>",
            "",
            "\t</div>",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue from \"vue\";",
            "\timport Component from \"vue-class-component\";",
            "",
            "\tconst ${1:App}Props = Vue.extend({",
            "\t\tprops: {",
            "\t\t\t${2:nameProp}: ${3:type}",
            "\t\t}",
            "\t})",
            "",
            "\t@Component({})",
            "\texport default class ${1:App} extends ${1:App}Props {",
            "\t\t${0}",
            "\t};",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base class-style API extending Props for Vue.js File with TypeScript"
    },
    "Vue Composition API using Vue 2": {
        "prefix": "vcompbase",
        "body": [
            "<template>",
            "",
            "</template>",
            "",
            "<script lang=\"ts\">",
            "\timport Vue from \"vue\";",
            "\timport { defineComponent } from \"@vue/composition-api\";",
            "",
            "\texport default defineComponent({",
            "\t\t${0}",
            "\t});",
            "</script>",
            "",
            "<style scoped>",
            "",
            "</style>"
        ],
        "description": "Base for Vue.js File with TypeScript using the Composition API plugin for Vue 2"
    }
}